[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module generate('http://www.eclipse.org/emf/2002/Ecore')]


[**
 * The documentation of the template generateRacket.
 * @param anOclAny
 */]
[template public generateRacket(anEPackage : EPackage)]
[comment @main/]
[file (decamel(anEPackage.name)+'.rkt', false, 'UTF-8')]
#lang racket/base

; (module [decamel(anEPackage.name)/] racket/base

  (require racket/class)

  [generate_provides(anEPackage)/]

[for (klass : EClass | anEPackage.eClassifiers->filter(EClass))]
[generate_EClass(klass)/]

[/for]
;) ; end module [decamel(anEPackage.name)/]
[/file]
[/template]

[template private generate_provides (anEPackage : EPackage) ]
(provide
	[for (klass : EClass | anEPackage.eClassifiers->filter(EClass))]
		[eclass_to_racket_class_name(klass)/]
	[/for]
	)
[/template]

[template private generate_EClass(klass: EClass)]
[let cname:String = eclass_to_racket_class_name(klass)] 
;; Class [klass.name + ' (' + cname + ')'/]
(define [cname/]
  (class [superclass_spec(klass)/]
	[comment See if generating some init method /]
    (super-new)

    ;; fields (features)
	[generate_fields(klass)/]

  ))
[/let]
[/template]

[template private generate_fields(klass : EClass)]
[gen_attributes(klass)/]
[gen_references(klass)/]
[/template]

[template private gen_attributes(klass : EClass)]
[for (sf: EAttribute | klass.eStructuralFeatures->filter(EAttribute))]
[let dec : String = decamel(sf.name)]
; attribute [dec/]
(field ([dec/] 0))

[/let]
[/for]
[/template]

[template private gen_references(klass : EClass)]
[for (ref: EReference | klass.eStructuralFeatures->filter(EReference))]
[let dec : String = decamel(ref.name)]
; reference [dec/]
(field ([dec/] null))

[/let]
[/for]
[/template]


[template private eclass_to_racket_class_name(klass: EClass)]
[decamel(klass.name)/]%
[/template]

[template private superclass_spec(klass : EClass)]
[let superclasses : OrderedSet(EClass) = klass.eSuperTypes]
[if superclasses->size() = 0]
object%
[else]
[eclass_to_racket_class_name(superclasses->first())/]
[/if]
[/let]	
[/template]

[template private decamel(name : EString)]
[name.replaceAll('([a-z])([A-Z][a-z])', '$1-$2').toLowerCase()/]
[/template]