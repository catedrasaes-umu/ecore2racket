#lang racket

;; Class Box (box%)
(define box%
  (class object%
  
    (super-new)

    ;; slots (features)
	feature comment
	feature name
	feature attributes
	feature methods
	feature wires
	feature boxes
	feature connection
	

  ))


;; Class BoxReference (boxreference%)
(define boxreference%
  (class object%
  
    (super-new)

    ;; slots (features)
	feature box
	feature isPointer
	feature isReference
	feature name
	

  ))


;; Class WireReference (wirereference%)
(define wirereference%
  (class object%
  
    (super-new)

    ;; slots (features)
	feature wire
	

  ))


;; Class LocalWireReference (localwirereference%)
(define localwirereference%
  (class wirereference%
  
    (super-new)

    ;; slots (features)
	feature wire
	

  ))


;; Class ExternalWireReference (externalwirereference%)
(define externalwirereference%
  (class wirereference%
  
    (super-new)

    ;; slots (features)
	feature wire
	feature boxReference
	

  ))


;; Class Connection (connection%)
(define connection%
  (class object%
  
    (super-new)

    ;; slots (features)
	feature from
	feature to
	

  ))


;; Class Wire (wire%)
(define wire%
  (class object%
  
    (super-new)

    ;; slots (features)
	feature isInput
	feature name
	feature type
	

  ))


;; Class Type (type%)
(define type%
  (class object%
  
    (super-new)

    ;; slots (features)
	feature isPointer
	feature isReference
	

  ))


;; Class BasicType (basictype%)
(define basictype%
  (class type%
  
    (super-new)

    ;; slots (features)
	feature isPointer
	feature isReference
	feature basicType
	

  ))


;; Class OtherType (othertype%)
(define othertype%
  (class type%
  
    (super-new)

    ;; slots (features)
	feature isPointer
	feature isReference
	feature namespace
	feature name
	

  ))


;; Class Method (method%)
(define method%
  (class object%
  
    (super-new)

    ;; slots (features)
	feature comment
	feature isPrivate
	feature type
	feature name
	feature parameters
	

  ))


;; Class Param (param%)
(define param%
  (class object%
  
    (super-new)

    ;; slots (features)
	feature comment
	feature type
	feature name
	feature defaultValue
	

  ))


;; Class WireMany (wiremany%)
(define wiremany%
  (class wire%
  
    (super-new)

    ;; slots (features)
	feature isInput
	feature name
	feature type
	

  ))


;; Class WireMethod (wiremethod%)
(define wiremethod%
  (class wire%
  
    (super-new)

    ;; slots (features)
	feature isInput
	feature name
	feature type
	feature method
	

  ))


