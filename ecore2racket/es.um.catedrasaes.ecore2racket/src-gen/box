#lang racket

;; Class Box (box%)
(define box%
  (class object%
  
    (super-new)

    ;; slots (features)
	; attribute comment
	(define comment 0)
	(define/public (get-comment) comment)
	(define/public (set-comment! v)
	  (set! comment v))
	
	; attribute name
	(define name 0)
	(define/public (get-name) name)
	(define/public (set-name! v)
	  (set! name v))
	
	
	; reference attributes
	(define attributes null)
	(define/public (get-attributes) attributes)
	(define/public (set-attributes! v)
	  (set! attributes v))
	
	; reference methods
	(define methods null)
	(define/public (get-methods) methods)
	(define/public (set-methods! v)
	  (set! methods v))
	
	; reference wires
	(define wires null)
	(define/public (get-wires) wires)
	(define/public (set-wires! v)
	  (set! wires v))
	
	; reference boxes
	(define boxes null)
	(define/public (get-boxes) boxes)
	(define/public (set-boxes! v)
	  (set! boxes v))
	
	; reference connection
	(define connection null)
	(define/public (get-connection) connection)
	(define/public (set-connection! v)
	  (set! connection v))
	
	

  ))


;; Class BoxReference (box-reference%)
(define box-reference%
  (class object%
  
    (super-new)

    ;; slots (features)
	; attribute is-pointer
	(define is-pointer 0)
	(define/public (get-is-pointer) is-pointer)
	(define/public (set-is-pointer! v)
	  (set! is-pointer v))
	
	; attribute is-reference
	(define is-reference 0)
	(define/public (get-is-reference) is-reference)
	(define/public (set-is-reference! v)
	  (set! is-reference v))
	
	; attribute name
	(define name 0)
	(define/public (get-name) name)
	(define/public (set-name! v)
	  (set! name v))
	
	
	; reference box
	(define box null)
	(define/public (get-box) box)
	(define/public (set-box! v)
	  (set! box v))
	
	

  ))


;; Class WireReference (wire-reference%)
(define wire-reference%
  (class object%
  
    (super-new)

    ;; slots (features)
	
	; reference wire
	(define wire null)
	(define/public (get-wire) wire)
	(define/public (set-wire! v)
	  (set! wire v))
	
	

  ))


;; Class LocalWireReference (local-wire-reference%)
(define local-wire-reference%
  (class wire-reference%
  
    (super-new)

    ;; slots (features)
	
	

  ))


;; Class ExternalWireReference (external-wire-reference%)
(define external-wire-reference%
  (class wire-reference%
  
    (super-new)

    ;; slots (features)
	
	; reference box-reference
	(define box-reference null)
	(define/public (get-box-reference) box-reference)
	(define/public (set-box-reference! v)
	  (set! box-reference v))
	
	

  ))


;; Class Connection (connection%)
(define connection%
  (class object%
  
    (super-new)

    ;; slots (features)
	
	; reference from
	(define from null)
	(define/public (get-from) from)
	(define/public (set-from! v)
	  (set! from v))
	
	; reference to
	(define to null)
	(define/public (get-to) to)
	(define/public (set-to! v)
	  (set! to v))
	
	

  ))


;; Class Wire (wire%)
(define wire%
  (class object%
  
    (super-new)

    ;; slots (features)
	; attribute is-input
	(define is-input 0)
	(define/public (get-is-input) is-input)
	(define/public (set-is-input! v)
	  (set! is-input v))
	
	; attribute name
	(define name 0)
	(define/public (get-name) name)
	(define/public (set-name! v)
	  (set! name v))
	
	
	; reference type
	(define type null)
	(define/public (get-type) type)
	(define/public (set-type! v)
	  (set! type v))
	
	

  ))


;; Class Type (type%)
(define type%
  (class object%
  
    (super-new)

    ;; slots (features)
	; attribute is-pointer
	(define is-pointer 0)
	(define/public (get-is-pointer) is-pointer)
	(define/public (set-is-pointer! v)
	  (set! is-pointer v))
	
	; attribute is-reference
	(define is-reference 0)
	(define/public (get-is-reference) is-reference)
	(define/public (set-is-reference! v)
	  (set! is-reference v))
	
	
	

  ))


;; Class BasicType (basic-type%)
(define basic-type%
  (class type%
  
    (super-new)

    ;; slots (features)
	; attribute basic-type
	(define basic-type 0)
	(define/public (get-basic-type) basic-type)
	(define/public (set-basic-type! v)
	  (set! basic-type v))
	
	
	

  ))


;; Class OtherType (other-type%)
(define other-type%
  (class type%
  
    (super-new)

    ;; slots (features)
	; attribute namespace
	(define namespace 0)
	(define/public (get-namespace) namespace)
	(define/public (set-namespace! v)
	  (set! namespace v))
	
	; attribute name
	(define name 0)
	(define/public (get-name) name)
	(define/public (set-name! v)
	  (set! name v))
	
	
	

  ))


;; Class Method (method%)
(define method%
  (class object%
  
    (super-new)

    ;; slots (features)
	; attribute comment
	(define comment 0)
	(define/public (get-comment) comment)
	(define/public (set-comment! v)
	  (set! comment v))
	
	; attribute is-private
	(define is-private 0)
	(define/public (get-is-private) is-private)
	(define/public (set-is-private! v)
	  (set! is-private v))
	
	; attribute name
	(define name 0)
	(define/public (get-name) name)
	(define/public (set-name! v)
	  (set! name v))
	
	
	; reference type
	(define type null)
	(define/public (get-type) type)
	(define/public (set-type! v)
	  (set! type v))
	
	; reference parameters
	(define parameters null)
	(define/public (get-parameters) parameters)
	(define/public (set-parameters! v)
	  (set! parameters v))
	
	

  ))


;; Class Param (param%)
(define param%
  (class object%
  
    (super-new)

    ;; slots (features)
	; attribute comment
	(define comment 0)
	(define/public (get-comment) comment)
	(define/public (set-comment! v)
	  (set! comment v))
	
	; attribute name
	(define name 0)
	(define/public (get-name) name)
	(define/public (set-name! v)
	  (set! name v))
	
	; attribute default-value
	(define default-value 0)
	(define/public (get-default-value) default-value)
	(define/public (set-default-value! v)
	  (set! default-value v))
	
	
	; reference type
	(define type null)
	(define/public (get-type) type)
	(define/public (set-type! v)
	  (set! type v))
	
	

  ))


;; Class WireMany (wire-many%)
(define wire-many%
  (class wire%
  
    (super-new)

    ;; slots (features)
	
	

  ))


;; Class WireMethod (wire-method%)
(define wire-method%
  (class wire%
  
    (super-new)

    ;; slots (features)
	
	; reference method
	(define method null)
	(define/public (get-method) method)
	(define/public (set-method! v)
	  (set! method v))
	
	

  ))


